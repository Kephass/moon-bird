{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport EditScreenInfo from \"../components/EditScreenInfo\";\nimport { Text, View } from \"../components/Themed\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function TabOneScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      user = _React$useState2[0],\n      setUser = _React$useState2[1];\n\n  React.useEffect(function () {\n    (function _callee() {\n      var response, data;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(fetch('http://localhost:4000', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                  query: \"\\n            query {\\n              currentUser {\\n                id\\n                email\\n              }\\n            } \\n            \"\n                })\n              }));\n\n            case 2:\n              response = _context.sent;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(response.json());\n\n            case 5:\n              data = _context.sent;\n              setUser(data.currentUser);\n              console.log(data);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: \"Tab Felix\"\n    }), _jsx(View, {\n      style: styles.separator,\n      lightColor: \"#eee\",\n      darkColor: \"rgba(255,255,255,0.1)\"\n    }), _jsx(EditScreenInfo, {\n      path: \"/screens/TabOneScreen.tsx\"\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold'\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%'\n  }\n});","map":{"version":3,"names":["React","EditScreenInfo","Text","View","TabOneScreen","navigation","useState","user","setUser","useEffect","fetch","method","headers","body","JSON","stringify","query","response","json","data","currentUser","console","log","styles","container","title","separator","StyleSheet","create","flex","alignItems","justifyContent","fontSize","fontWeight","marginVertical","height","width"],"sources":["/Users/jawadsefiani/Desktop/moon-bird/app/screens/TabOneScreen.tsx"],"sourcesContent":["import * as React from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport { Text, View } from '../components/Themed';\nimport { RootTabScreenProps } from '../types';\n\nexport default function TabOneScreen({ navigation }: RootTabScreenProps<'TabOne'>) {\n  const [user, setUser] = React.useState(null);\n\n  React.useEffect(() => {\n    (async () => {\n      const response = await fetch('http://localhost:4000', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          query: `\n            query {\n              currentUser {\n                id\n                email\n              }\n            } \n            `,\n        }),\n      });\n      const data = await response.json();\n\n      setUser(data.currentUser);\n\n      console.log(data);\n    })();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Tab Felix</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <EditScreenInfo path=\"/screens/TabOneScreen.tsx\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AAGA,OAAOC,cAAP;AACA,SAASC,IAAT,EAAeC,IAAf;;;AAGA,eAAe,SAASC,YAAT,OAAoE;EAAA,IAA5CC,UAA4C,QAA5CA,UAA4C;;EACjF,sBAAwBL,KAAK,CAACM,QAAN,CAAe,IAAf,CAAxB;EAAA;EAAA,IAAOC,IAAP;EAAA,IAAaC,OAAb;;EAEAR,KAAK,CAACS,SAAN,CAAgB,YAAM;IACpB,CAAC;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,iCACwBC,KAAK,CAAC,uBAAD,EAA0B;gBACpDC,MAAM,EAAE,MAD4C;gBAEpDC,OAAO,EAAE;kBACP,gBAAgB;gBADT,CAF2C;gBAKpDC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;kBACnBC,KAAK;gBADc,CAAf;cAL8C,CAA1B,CAD7B;;YAAA;cACOC,QADP;cAAA;cAAA,iCAiBoBA,QAAQ,CAACC,IAAT,EAjBpB;;YAAA;cAiBOC,IAjBP;cAmBCX,OAAO,CAACW,IAAI,CAACC,WAAN,CAAP;cAEAC,OAAO,CAACC,GAAR,CAAYH,IAAZ;;YArBD;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAD;EAuBD,CAxBD,EAwBG,EAxBH;EA0BA,OACE,MAAC,IAAD;IAAM,KAAK,EAAEI,MAAM,CAACC,SAApB;IAAA,WACE,KAAC,IAAD;MAAM,KAAK,EAAED,MAAM,CAACE,KAApB;MAAA;IAAA,EADF,EAEE,KAAC,IAAD;MAAM,KAAK,EAAEF,MAAM,CAACG,SAApB;MAA+B,UAAU,EAAC,MAA1C;MAAiD,SAAS,EAAC;IAA3D,EAFF,EAGE,KAAC,cAAD;MAAgB,IAAI,EAAC;IAArB,EAHF;EAAA,EADF;AAOD;AAED,IAAMH,MAAM,GAAGI,UAAU,CAACC,MAAX,CAAkB;EAC/BJ,SAAS,EAAE;IACTK,IAAI,EAAE,CADG;IAETC,UAAU,EAAE,QAFH;IAGTC,cAAc,EAAE;EAHP,CADoB;EAM/BN,KAAK,EAAE;IACLO,QAAQ,EAAE,EADL;IAELC,UAAU,EAAE;EAFP,CANwB;EAU/BP,SAAS,EAAE;IACTQ,cAAc,EAAE,EADP;IAETC,MAAM,EAAE,CAFC;IAGTC,KAAK,EAAE;EAHE;AAVoB,CAAlB,CAAf"},"metadata":{},"sourceType":"module"}